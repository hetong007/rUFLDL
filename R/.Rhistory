W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
length(fitted)
fitted[1:10]
hist(fitted)
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0.001,maxStep=100000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=100000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=1000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=100)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=1)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=2)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
model
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20)
model
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=200)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=2000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
g = function(x, y) 1/(1+2^(x^3+y+x*y))
d = data.frame(x1=rnorm(10000), x2=rnorm(10000)
,x3=rnorm(10000), x4=rnorm(10000))
d$y = with(d, ifelse(runif(10000) < g(x1, x2), 1, 0))
g = function(x, y) 1/(1+2^(x^3+y+x*y))
x = data.frame(x1=rnorm(10000), x2=rnorm(10000)
,x3=rnorm(10000), x4=rnorm(10000))
y = with(d, ifelse(runif(10000) < g(x1, x2), 1, 0))
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
g = function(x, y) 1/(1+2^(x^3+y+x*y))
x = data.frame(x1=rnorm(2000), x2=rnorm(2000)
,x3=rnorm(2000), x4=rnorm(2000), x5=rnorm(2000))
y = with(d, ifelse(runif(2000) < g(x1, x2), 1, 0))
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
y = apply(x[,1:2],1,g)
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = apply(x[,1:2],1,g)
y[1:5]
hist(y)
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
y[1:20]
sum(y)
tmp=ParameterInitializer(c(5,10,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=20000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
tmp=ParameterInitializer(c(5,100,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=0000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
tmp=ParameterInitializer(c(5,100,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5)
{
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
}
else
{
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5)
{
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5)
{
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5)
{
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
runif(100)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5) {
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
if (runif(1)>0.5) {
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(10000),ncol=5)
choice = runif(1)
show(choice)
if (choice>0.5) {
y = x[,1]-exp(x[,2]^2)+sin(x[,4])
y = as.numeric(y>0)
} else {
g = function(x) 1/(1+2^(x[1]^3+x[2]+x[1]*x[2]))
y = as.numeric(apply(x[,1:2],1,g)>runif(2000))
}
tmp=ParameterInitializer(c(5,100,1))
W = tmp[[1]]
b = tmp[[2]]
model = Backpropagation(x[1:1000,],y[1:1000],W,b,
alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x[1:1000,],1,ForwardPropagation,W,b,'single')
pred = apply(x[1001:2000,],1,ForwardPropagation,W,b,'single')
require(AUC)
auc(roc(fitted,as.factor(y[1:1000])))
auc(roc(pred,as.factor(y[1001:2000])))
x = matrix(rnorm(6000),ncol=6)
x[,2] = x[,1]+5+x[,2]
x[,3] = x[,2]*5+x[,3]
x[,5] = x[,4]+5-x[,5]
x[,6] = x[,5]*5-x[,6]
x[1:3,]
x = matrix(rnorm(6000),ncol=6)
x[,2] = x[,1]+5+x[,2]
x[,3] = x[,2]*5+x[,3]
x[,5] = x[,4]+5-x[,5]
x[,6] = x[,5]*5-x[,6]
tmp=ParameterInitializer(c(6,2,6))
W = tmp[[1]]
b = tmp[[2]]
model = Autoencoder(x,W,b,alpha=0.1,lambda=0,maxStep=10000)
source('~/github/rUFLDL/R/Autoencoders_and_Sparsity.R')
x = matrix(rnorm(6000),ncol=6)
x[,2] = x[,1]+5+x[,2]
x[,3] = x[,2]*5+x[,3]
x[,5] = x[,4]+5-x[,5]
x[,6] = x[,5]*5-x[,6]
tmp=ParameterInitializer(c(6,2,6))
W = tmp[[1]]
b = tmp[[2]]
model = Autoencoder(x,W,b,alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x,1,ForwardPropagation,W,b,'single')
dim(fitted)
fitted[,1:5]
fitted = t(fitted)
fitted[1,]
x[1,]
x = matrix(rnorm(6000),ncol=6)
x[,2] = x[,1]+5+x[,2]
x[,3] = x[,2]*5+x[,3]
x[,5] = x[,4]+5-x[,5]
x[,6] = x[,5]*5-x[,6]
for (i in 1:6)
x[,i] = (x[,i]-min(x[,i]))/(max(x[,i])-min(x[,i]))
tmp=ParameterInitializer(c(6,2,6))
W = tmp[[1]]
b = tmp[[2]]
model = Autoencoder(x,W,b,alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x,1,ForwardPropagation,W,b,'single')
fitted = t(fitted)
fitted[1,]
x[1,]
plot(fitted,x)
?runif
x = matrix(rnorm(6000),ncol=6)
x[,1] = runif(1000,min=0,max=0.1)
x[,2] = x[,1]+5+x[,2]
x[,3] = x[,2]*5+x[,3]
x[,4] = runif(1000,min=0.9,max=1)
x[,5] = x[,4]+5-x[,5]
x[,6] = x[,5]*5-x[,6]
for (i in 1:6)
x[,i] = (x[,i]-min(x[,i]))/(max(x[,i])-min(x[,i]))
tmp=ParameterInitializer(c(6,2,6))
W = tmp[[1]]
b = tmp[[2]]
model = Autoencoder(x,W,b,alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x,1,ForwardPropagation,W,b,'single')
fitted = t(fitted)
fitted[1,]
x[1,]
plot(fitted,x)
abline(0,1)
x = matrix(rnorm(6000),ncol=6)
x[,1] = runif(1000,min=0,max=0.1)
x[,2] = x[,1]+5
x[,3] = x[,2]*5
x[,4] = runif(1000,min=0.9,max=1)
x[,5] = x[,4]+5
x[,6] = x[,5]*5
for (i in 1:6)
x[,i] = (x[,i]-min(x[,i]))/(max(x[,i])-min(x[,i]))
tmp=ParameterInitializer(c(6,2,6))
W = tmp[[1]]
b = tmp[[2]]
model = Autoencoder(x,W,b,alpha=0.1,lambda=0,maxStep=10000)
W = model[[1]]
b = model[[2]]
fitted = apply(x,1,ForwardPropagation,W,b,'single')
fitted = t(fitted)
plot(fitted,x)
